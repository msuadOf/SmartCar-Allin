C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_DMA_Isr
OBJECT MODULE PLACED IN .\MDK\Obj\STC32G_DMA_Isr.obj
COMPILER INVOKED BY: D:\Programs\keil_v5\C251\BIN\C251.EXE Driver\Isr\STC32G_DMA_Isr.c XSMALL INTR2 BROWSE INCDIR(.\Driv
                    -er;.\Driver\Inc;.\Driver\Isr;.\CORE\Inc;.\bsp\include) DEBUG PRINT(.\MDK\List\STC32G_DMA_Isr.lst) TABS(2) OBJECT(.\MDK\O
                    -bj\STC32G_DMA_Isr.obj) 

stmt  level    source

    1          #include "STC32G_DMA.h"
    2          #include "STC32G_SPI.h"
    3          #include "STC32G_LCM.h"
    4          
    5          //========================================================================
    6          // 函数: DMA_ADC_ISR_Handler
    7          // 描述: DMA ADC 中断函数.
    8          // 参数: none.
    9          // 返回: none.
   10          // 版本: V1.0, 2022-03-23
   11          //========================================================================
   12          void DMA_ADC_ISR_Handler (void) interrupt DMA_ADC_VECTOR
   13          {
   14   1        // TODO: 在此处添加用户代码
   15   1        if(DMA_ADC_STA & 0x01)  //AD转换完成
   16   1        {
   17   2          DMA_ADC_STA &= ~0x01; //清标志位
   18   2      //    DmaADCFlag = 1;
   19   2        }
   20   1      }
   21          
   22          //========================================================================
   23          // 函数: DMA_M2M_ISR_Handler
   24          // 描述: DMA M2M 中断函数.
   25          // 参数: none.
   26          // 返回: none.
   27          // 版本: V1.0, 2022-03-23
   28          //========================================================================
   29          void DMA_M2M_ISR_Handler (void) interrupt DMA_M2M_VECTOR
   30          {
   31   1        // TODO: 在此处添加用户代码
   32   1        if(DMA_M2M_STA & 0x01)  //M2M传输完成
   33   1        {
   34   2          DMA_M2M_STA &= ~0x01; //清标志位
   35   2      //    DmaM2MFlag = 1;
   36   2      //    if(u2sFlag)
   37   2      //    {
   38   2      //      u2sFlag = 0;
   39   2      //      SpiSendFlag = 1;
   40   2      //    }
   41   2      //    if(s2uFlag)
   42   2      //    {
   43   2      //      s2uFlag = 0;
   44   2      //      UartSendFlag = 1;
   45   2      //    }
   46   2        }
   47   1      }
   48          
   49          //========================================================================
   50          // 函数: DMA_UART1TX_ISR_Handler
   51          // 描述: DMA UART1 TX 中断函数.
   52          // 参数: none.
   53          // 返回: none.
   54          // 版本: V1.0, 2022-03-23
   55          //========================================================================
   56          void DMA_UART1TX_ISR_Handler (void) interrupt DMA_UR1T_VECTOR
   57          {
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 2   

   58   1        // TODO: 在此处添加用户代码
   59   1        if (DMA_UR1T_STA & 0x01)  //发送完成
   60   1        {
   61   2          DMA_UR1T_STA &= ~0x01;  //清标志位
   62   2      //    DmaTx1Flag = 1;
   63   2        }
   64   1        if (DMA_UR1T_STA & 0x04)  //数据覆盖
   65   1        {
   66   2          DMA_UR1T_STA &= ~0x04;  //清标志位
   67   2        }
   68   1      }
   69          
   70          //========================================================================
   71          // 函数: DMA_UART1RX_ISR_Handler
   72          // 描述: DMA UART1 RX 中断函数.
   73          // 参数: none.
   74          // 返回: none.
   75          // 版本: V1.0, 2022-03-23
   76          //========================================================================
   77          void DMA_UART1RX_ISR_Handler (void) interrupt DMA_UR1R_VECTOR
   78          {
   79   1        // TODO: 在此处添加用户代码
   80   1        if (DMA_UR1R_STA & 0x01)  //接收完成
   81   1        {
   82   2          DMA_UR1R_STA &= ~0x01;  //清标志位
   83   2      //    DmaRx1Flag = 1;
   84   2      
   85   2      //    DMA_UR1T_TRIG();  //重新触发UART1发送功能
   86   2      //    DMA_UR1R_TRIG();  //重新触发UART1接收功能
   87   2        }
   88   1        if (DMA_UR1R_STA & 0x02)  //数据丢弃
   89   1        {
   90   2          DMA_UR1R_STA &= ~0x02;  //清标志位
   91   2        }
   92   1      }
   93          
   94          //========================================================================
   95          // 函数: DMA_UART2TX_ISR_Handler
   96          // 描述: DMA UART2 TX 中断函数.
   97          // 参数: none.
   98          // 返回: none.
   99          // 版本: V1.0, 2022-03-23
  100          //========================================================================
  101          void DMA_UART2TX_ISR_Handler (void) interrupt DMA_UR2T_VECTOR
  102          {
  103   1        // TODO: 在此处添加用户代码
  104   1        if (DMA_UR2T_STA & 0x01)  //发送完成
  105   1        {
  106   2          DMA_UR2T_STA &= ~0x01;  //清标志位
  107   2      //    DmaTx2Flag = 1;
  108   2        }
  109   1        if (DMA_UR2T_STA & 0x04)  //数据覆盖
  110   1        {
  111   2          DMA_UR2T_STA &= ~0x04;  //清标志位
  112   2        }
  113   1      }
  114          
  115          //========================================================================
  116          // 函数: DMA_UART2RX_ISR_Handler
  117          // 描述: DMA UART2 RX 中断函数.
  118          // 参数: none.
  119          // 返回: none.
  120          // 版本: V1.0, 2022-03-23
  121          //========================================================================
  122          void DMA_UART2RX_ISR_Handler (void) interrupt DMA_UR2R_VECTOR
  123          {
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 3   

  124   1        // TODO: 在此处添加用户代码
  125   1        if (DMA_UR2R_STA & 0x01)  //接收完成
  126   1        {
  127   2          DMA_UR2R_STA &= ~0x01;  //清标志位
  128   2      //    DmaRx2Flag = 1;
  129   2      
  130   2      //    DMA_UR2T_TRIG();  //重新触发UART2发送功能
  131   2      //    DMA_UR2R_TRIG();  //重新触发UART2接收功能
  132   2        }
  133   1        if (DMA_UR2R_STA & 0x02)  //数据丢弃
  134   1        {
  135   2          DMA_UR2R_STA &= ~0x02;  //清标志位
  136   2        }
  137   1      }
  138          
  139          //========================================================================
  140          // 函数: DMA_UART3TX_ISR_Handler
  141          // 描述: DMA UART3 TX 中断函数.
  142          // 参数: none.
  143          // 返回: none.
  144          // 版本: V1.0, 2022-03-23
  145          //========================================================================
  146          void DMA_UART3TX_ISR_Handler (void) interrupt DMA_UR3T_VECTOR
  147          {
  148   1        // TODO: 在此处添加用户代码
  149   1        if (DMA_UR3T_STA & 0x01)  //发送完成
  150   1        {
  151   2          DMA_UR3T_STA &= ~0x01;  //清标志位
  152   2      //    DmaTx3Flag = 1;
  153   2        }
  154   1        if (DMA_UR3T_STA & 0x04)  //数据覆盖
  155   1        {
  156   2          DMA_UR3T_STA &= ~0x04;  //清标志位
  157   2        }
  158   1      }
  159          
  160          //========================================================================
  161          // 函数: DMA_UART3RX_ISR_Handler
  162          // 描述: DMA UART3 RX 中断函数.
  163          // 参数: none.
  164          // 返回: none.
  165          // 版本: V1.0, 2022-03-23
  166          //========================================================================
  167          void DMA_UART3RX_ISR_Handler (void) interrupt DMA_UR3R_VECTOR
  168          {
  169   1        // TODO: 在此处添加用户代码
  170   1        if (DMA_UR3R_STA & 0x01)  //接收完成
  171   1        {
  172   2          DMA_UR3R_STA &= ~0x01;  //清标志位
  173   2      //    DmaRx3Flag = 1;
  174   2      
  175   2      //    DMA_UR3T_TRIG();  //重新触发UART3发送功能
  176   2      //    DMA_UR3R_TRIG();  //重新触发UART3接收功能
  177   2        }
  178   1        if (DMA_UR3R_STA & 0x02)  //数据丢弃
  179   1        {
  180   2          DMA_UR3R_STA &= ~0x02;  //清标志位
  181   2        }
  182   1      }
  183          
  184          //========================================================================
  185          // 函数: DMA_UART4TX_ISR_Handler
  186          // 描述: DMA UART4 TX 中断函数.
  187          // 参数: none.
  188          // 返回: none.
  189          // 版本: V1.0, 2022-03-23
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 4   

  190          //========================================================================
  191          void DMA_UART4TX_ISR_Handler (void) interrupt DMA_UR4T_VECTOR
  192          {
  193   1        // TODO: 在此处添加用户代码
  194   1        if (DMA_UR4T_STA & 0x01)  //发送完成
  195   1        {
  196   2          DMA_UR4T_STA &= ~0x01;  //清标志位
  197   2      //    DmaTx4Flag = 1;
  198   2        }
  199   1        if (DMA_UR4T_STA & 0x04)  //数据覆盖
  200   1        {
  201   2          DMA_UR4T_STA &= ~0x04;  //清标志位
  202   2        }
  203   1      }
  204          
  205          //========================================================================
  206          // 函数: DMA_UART4RX_ISR_Handler
  207          // 描述: DMA UART4 RX 中断函数.
  208          // 参数: none.
  209          // 返回: none.
  210          // 版本: V1.0, 2022-03-23
  211          //========================================================================
  212          void DMA_UART4RX_ISR_Handler (void) interrupt DMA_UR4R_VECTOR
  213          {
  214   1        // TODO: 在此处添加用户代码
  215   1        if (DMA_UR4R_STA & 0x01)  //接收完成
  216   1        {
  217   2          DMA_UR4R_STA &= ~0x01;  //清标志位
  218   2      //    DmaRx4Flag = 1;
  219   2      
  220   2      //    DMA_UR4T_TRIG();  //重新触发UART4发送功能
  221   2      //    DMA_UR4R_TRIG();  //重新触发UART4接收功能
  222   2        }
  223   1        if (DMA_UR4R_STA & 0x02)  //数据丢弃
  224   1        {
  225   2          DMA_UR4R_STA &= ~0x02;  //清标志位
  226   2        }
  227   1      }
  228          
  229          //========================================================================
  230          // 函数: DMA_SPI_ISR_Handler
  231          // 描述: DMA SPI 中断函数.
  232          // 参数: none.
  233          // 返回: none.
  234          // 版本: V1.0, 2022-03-23
  235          //========================================================================
  236          void DMA_SPI_ISR_Handler (void) interrupt DMA_SPI_VECTOR
  237          {
  238   1        // TODO: 在此处添加用户代码
  239   1        if(DMA_SPI_STA & 0x01)  //通信完成
  240   1        {
  241   2          DMA_SPI_STA &= ~0x01; //清标志位
  242   2          if(MSTR) 
  243   2          { //主机模式
  244   3      //      SpiTxFlag = 1;
  245   3            SPI_SS_2 = 1;
  246   3          }
  247   2          else 
  248   2          { //从机模式
  249   3      //      SpiRxFlag = 1;
  250   3          }
  251   2        }
  252   1        if(DMA_SPI_STA & 0x02)  //数据丢弃
  253   1        {
  254   2          DMA_SPI_STA &= ~0x02; //清标志位
  255   2        }
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 5   

  256   1        if(DMA_SPI_STA & 0x04)  //数据覆盖
  257   1        {
  258   2          DMA_SPI_STA &= ~0x04; //清标志位
  259   2        }
  260   1      }
  261          
  262          //========================================================================
  263          // 函数: DMA_I2C_ISR_Handler
  264          // 描述: DMA I2C 发送中断函数.
  265          // 参数: none.
  266          // 返回: none.
  267          // 版本: V1.0, 2022-03-25
  268          //========================================================================
  269          void DMA_I2CT_ISR_Handler (void) interrupt DMA_I2CT_VECTOR
  270          {
  271   1        // TODO: 在此处添加用户代码
  272   1        if(DMA_I2CT_STA & 0x01)   //发送完成
  273   1        {
  274   2          DMA_I2CT_STA &= ~0x01;  //清除标志位
  275   2      //    DmaI2CTFlag = 0;
  276   2        }
  277   1        if(DMA_I2CT_STA & 0x04)   //数据覆盖
  278   1        {
  279   2          DMA_I2CT_STA &= ~0x04;  //清除标志位
  280   2        }
  281   1      }
  282          
  283          //========================================================================
  284          // 函数: DMA_I2CR_ISR_Handler
  285          // 描述: DMA I2C 接收中断函数.
  286          // 参数: none.
  287          // 返回: none.
  288          // 版本: V1.0, 2022-03-25
  289          //========================================================================
  290          void DMA_I2CR_ISR_Handler (void) interrupt DMA_I2CR_VECTOR
  291          {
  292   1        // TODO: 在此处添加用户代码
  293   1        if(DMA_I2CR_STA & 0x01)   //接收完成
  294   1        {
  295   2          DMA_I2CR_STA &= ~0x01;  //清除标志位
  296   2      //    DmaI2CRFlag = 0;
  297   2        }
  298   1        if(DMA_I2CR_STA & 0x02)   //数据丢弃
  299   1        {
  300   2          DMA_I2CR_STA &= ~0x02;  //清除标志位
  301   2        }
  302   1      }
  303          
  304          //========================================================================
  305          // 函数: DMA_LCM_ISR_Handler
  306          // 描述: DMA LCM 中断函数.
  307          // 参数: none.
  308          // 返回: none.
  309          // 版本: V1.0, 2022-03-23
  310          //========================================================================
  311          void DMA_LCM_ISR_Handler (void) interrupt DMA_LCM_VECTOR
  312          {
  313   1        // TODO: 在此处添加用户代码
  314   1        if(DMA_LCM_STA & 0x01)
  315   1        {
  316   2      //    if(DmaLcmFlag)
  317   2      //    {
  318   2      //      DmaLcmFlag = 0;
  319   2      //      DMA_LCM_CR = 0;
  320   2      //    }
  321   2      //    else
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 6   

  322   2      //    {
  323   2      //      LCM_Cnt--;
  324   2      //      if(LCM_Cnt == 0)
  325   2      //      {
  326   2      //        DMA_LCM_CR = 0;
  327   2      //        LCD_CS=1;
  328   2      //      }
  329   2      //      else
  330   2      //      {
  331   2      //        DMA_LCM_CR = 0xa0;  //Write dat
  332   2      //      }
  333   2      //    }
  334   2          DMA_LCM_STA = 0;    //清标志位
  335   2        }
  336   1      }
  337          
  338          //========================================================================
  339          // 函数: DMA_ISR_Handler
  340          // 描述: DMA中断函数.
  341          // 参数: none.
  342          // 返回: none.
  343          // 版本: V1.0, 2021-05-25
  344          //========================================================================
  345          void DMA_ISR_Handler (void) interrupt 13
  346          {
  347   1        // TODO: 在此处添加用户代码
  348   1        
  349   1        //----------- DMA ADC --------------
  350   1        if(DMA_ADC_STA & 0x01)  //AD转换完成
  351   1        {
  352   2          DMA_ADC_STA &= ~0x01; //清标志位
  353   2      //    DmaADCFlag = 1;
  354   2        }
  355   1      
  356   1        //----------- DMA M2M --------------
  357   1        if(DMA_M2M_STA & 0x01)  //M2M传输完成
  358   1        {
  359   2          DMA_M2M_STA &= ~0x01; //清标志位
  360   2      //    DmaM2MFlag = 1;
  361   2      //    if(u2sFlag)
  362   2      //    {
  363   2      //      u2sFlag = 0;
  364   2      //      SpiSendFlag = 1;
  365   2      //    }
  366   2      //    if(s2uFlag)
  367   2      //    {
  368   2      //      s2uFlag = 0;
  369   2      //      UartSendFlag = 1;
  370   2      //    }
  371   2        }
  372   1      
  373   1        //---------- DMA UART1 -------------
  374   1        if (DMA_UR1T_STA & 0x01)  //发送完成
  375   1        {
  376   2          DMA_UR1T_STA &= ~0x01;  //清标志位
  377   2      //    DmaTx1Flag = 1;
  378   2        }
  379   1        if (DMA_UR1T_STA & 0x04)  //数据覆盖
  380   1        {
  381   2          DMA_UR1T_STA &= ~0x04;  //清标志位
  382   2        }
  383   1        
  384   1        if (DMA_UR1R_STA & 0x01)  //接收完成
  385   1        {
  386   2          DMA_UR1R_STA &= ~0x01;  //清标志位
  387   2      //    DmaRx1Flag = 1;
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 7   

  388   2        }
  389   1        if (DMA_UR1R_STA & 0x02)  //数据丢弃
  390   1        {
  391   2          DMA_UR1R_STA &= ~0x02;  //清标志位
  392   2        }
  393   1        //---------- DMA UART2 -------------
  394   1        if (DMA_UR2T_STA & 0x01)  //发送完成
  395   1        {
  396   2          DMA_UR2T_STA &= ~0x01;  //清标志位
  397   2      //    DmaTx2Flag = 1;
  398   2        }
  399   1        if (DMA_UR2T_STA & 0x04)  //数据覆盖
  400   1        {
  401   2          DMA_UR2T_STA &= ~0x04;  //清标志位
  402   2        }
  403   1        
  404   1        if (DMA_UR2R_STA & 0x01)  //接收完成
  405   1        {
  406   2          DMA_UR2R_STA &= ~0x01;  //清标志位
  407   2      //    DmaRx2Flag = 1;
  408   2        }
  409   1        if (DMA_UR2R_STA & 0x02)  //数据丢弃
  410   1        {
  411   2          DMA_UR2R_STA &= ~0x02;  //清标志位
  412   2        }
  413   1        //---------- DMA UART3 -------------
  414   1        if (DMA_UR3T_STA & 0x01)  //发送完成
  415   1        {
  416   2          DMA_UR3T_STA &= ~0x01;  //清标志位
  417   2      //    DmaTx3Flag = 1;
  418   2        }
  419   1        if (DMA_UR3T_STA & 0x04)  //数据覆盖
  420   1        {
  421   2          DMA_UR3T_STA &= ~0x04;  //清标志位
  422   2        }
  423   1        
  424   1        if (DMA_UR3R_STA & 0x01)  //接收完成
  425   1        {
  426   2          DMA_UR3R_STA &= ~0x01;  //清标志位
  427   2      //    DmaRx3Flag = 1;
  428   2        }
  429   1        if (DMA_UR3R_STA & 0x02)  //数据丢弃
  430   1        {
  431   2          DMA_UR3R_STA &= ~0x02;  //清标志位
  432   2        }
  433   1        //---------- DMA UART4 -------------
  434   1        if (DMA_UR4T_STA & 0x01)  //发送完成
  435   1        {
  436   2          DMA_UR4T_STA &= ~0x01;  //清标志位
  437   2      //    DmaTx4Flag = 1;
  438   2        }
  439   1        if (DMA_UR4T_STA & 0x04)  //数据覆盖
  440   1        {
  441   2          DMA_UR4T_STA &= ~0x04;  //清标志位
  442   2        }
  443   1        
  444   1        if (DMA_UR4R_STA & 0x01)  //接收完成
  445   1        {
  446   2          DMA_UR4R_STA &= ~0x01;  //清标志位
  447   2      //    DmaRx4Flag = 1;
  448   2        }
  449   1        if (DMA_UR4R_STA & 0x02)  //数据丢弃
  450   1        {
  451   2          DMA_UR4R_STA &= ~0x02;  //清标志位
  452   2        }
  453   1      
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 8   

  454   1        //---------- DMA SPI -------------
  455   1        if(DMA_SPI_STA & 0x01)  //通信完成
  456   1        {
  457   2          DMA_SPI_STA &= ~0x01; //清标志位
  458   2          if(MSTR) 
  459   2          { //主机模式
  460   3      //      SpiTxFlag = 1;
  461   3            SPI_SS_2 = 1;
  462   3          }
  463   2          else 
  464   2          { //从机模式
  465   3      //      SpiRxFlag = 1;
  466   3          }
  467   2        }
  468   1        if(DMA_SPI_STA & 0x02)  //数据丢弃
  469   1        {
  470   2          DMA_SPI_STA &= ~0x02; //清标志位
  471   2        }
  472   1        if(DMA_SPI_STA & 0x04)  //数据覆盖
  473   1        {
  474   2          DMA_SPI_STA &= ~0x04; //清标志位
  475   2        }
  476   1      
  477   1        //------------- LCM --------------
  478   1        if(LCMIFSTA & 0x01)
  479   1        {
  480   2          LCMIFSTA = 0x00;
  481   2      //    LcmFlag = 0;
  482   2        }
  483   1        
  484   1        //---------- DMA LCM -------------
  485   1        if(DMA_LCM_STA & 0x01)
  486   1        {
  487   2      //    if(DmaLcmFlag)
  488   2      //    {
  489   2      //      DmaLcmFlag = 0;
  490   2      //      DMA_LCM_CR = 0;
  491   2      //    }
  492   2      //    else
  493   2      //    {
  494   2      //      LCM_Cnt--;
  495   2      //      if(LCM_Cnt == 0)
  496   2      //      {
  497   2      //        DMA_LCM_CR = 0;
  498   2      //        LCD_CS=1;
  499   2      //      }
  500   2      //      else
  501   2      //      {
  502   2      //        DMA_LCM_CR = 0xa0;  //Write dat
  503   2      //      }
  504   2      //    }
  505   2          DMA_LCM_STA = 0;    //清标志位
  506   2        }
  507   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1142     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     15/05/23  11:30:09  PAGE 9   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
